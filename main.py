# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '1.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import ctypes
from fnmatch import translate
import os
import sys
import subprocess
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QMessageBox, QSplashScreen
from PyQt5.QtGui import QPixmap
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QDesktopServices


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 350)
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)  # Remove the window title bar
        MainWindow.setAttribute(QtCore.Qt.WA_TranslucentBackground)  # Optional: make the background translucent
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setStyleSheet("background-color: #222831; border-radius: 18px; border:")
        self.frame.setGeometry(QtCore.QRect(0, 0, 500, 350))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame_2 = QtWidgets.QFrame(self.frame)
        self.frame_2.setGeometry(QtCore.QRect(0, 0, 501, 41))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_5.setGeometry(QtCore.QRect(470, 10, 20, 20))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_5.setStyleSheet("""
            QPushButton {
                background-color: #FF204E;
                color: #000000;
                border: 2px solid red;
                border-radius: 10px;
                padding: 10px 20px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: darkred;
                border: 3px solid red;
                color: white;
            }
            QPushButton:pressed {
                background-color: transparent;
                color: white;
            }
            
        """)
        self.pushButton_6 = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_6.setGeometry(QtCore.QRect(440, 10, 20, 20))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_6.setStyleSheet("""
            QPushButton {
                background-color: #41C9E2;
                color: #000000;
                border: 2px solid cyan;
                border-radius: 10px;
                padding: 10px 20px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #41C567;
                color: white;
            }
            QPushButton:pressed {
                background-color: transparent;
                color: white;
            }
            
        """)
        self.label = QtWidgets.QLabel(self.frame_2)
        self.label.setGeometry(QtCore.QRect(110, 0, 301, 41))
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setWordWrap(False)
        self.label.setObjectName("label")
        self.label.setStyleSheet("""
            QLabel {
                background-color: transparent;
                color: #40A2E3;
                padding: 10px 20px;
                font-size: 20px;
                
            }
            QLabel:hover {
                background-color: transparent;
                color: #40A2E3;
                
            }
            QLabel:pressed {
                background-color: transparent;
                color: #40A2E3;
    
                
            }
            
        """)
        self.frame_3 = QtWidgets.QFrame(self.frame)
        self.frame_3.setGeometry(QtCore.QRect(-1, 39, 501, 311))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.pushButton = QtWidgets.QPushButton(self.frame_3)
        self.pushButton.setGeometry(QtCore.QRect(40, 20, 121, 71))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.setVisible(False)
        self.pushButton.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #41C9E2;
                border: 2px solid #59D5E0;
                border-radius: 10px;
                padding: 10px 20px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: #41C9E2;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: #41C9E2;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_2 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_2.setGeometry(QtCore.QRect(40, 200, 121, 71))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.setVisible(False)
        self.pushButton_2.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #5356FF;
                border: 2px solid #5356FF;
                border-radius: 15px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: white;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: white;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_3 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_3.setGeometry(QtCore.QRect(40, 110, 121, 71))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.setVisible(False)
        self.pushButton_3.setStyleSheet("""
            QPushButton {
                background-color: #31363F;
                color: #FF204E;
                border: 2px solid #FF204E;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: white;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: white;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_11 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_11.setGeometry(QtCore.QRect(200, 20, 111, 71))
        self.pushButton_11.setObjectName("pushButton_11")
        self.pushButton_11.setVisible(False)
        self.pushButton_11.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #41C9E2;
                border: 2px solid #59D5E0;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: #41C9E2;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: #41C9E2;
                border: 2px solid #222831;
                
            }
            
            
        """)
        self.pushButton_12 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_12.setGeometry(QtCore.QRect(200, 110, 111, 71))
        self.pushButton_12.setObjectName("pushButton_12")
        self.pushButton_12.setVisible(False)
        self.pushButton_12.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #FF204E;
                border: 2px solid #FF204E;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: white;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: white;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_13 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_13.setGeometry(QtCore.QRect(340, 20, 111, 71))
        self.pushButton_13.setObjectName("pushButton_13")
        self.pushButton_13.setVisible(False)
        self.pushButton_13.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #41C9E2;
                border: 2px solid #59D5E0;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: #41C9E2;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: #41C9E2;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_14 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_14.setGeometry(QtCore.QRect(340, 110, 111, 71))
        self.pushButton_14.setObjectName("pushButton_14")
        self.pushButton_14.setVisible(False)
        self.pushButton_14.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #FF204E;
                border: 2px solid #FF204E;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                color: white;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: white;
                border: 2px solid #222831;
                
            }
            
        """)
        self.pushButton_4 = QtWidgets.QPushButton(self.frame_3)
        self.pushButton_4.setGeometry(QtCore.QRect(200, 110, 111, 71))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.setStyleSheet("""
            QPushButton {
                background-color: #222831;
                color: #59D5E0;
                border: 2px solid #59D5E0;
                border-radius: 10px;
                padding: 1px 2px;
                font-size: 20px;
                
            }
            QPushButton:hover {
                background-color: #31363F;
                border: 1px solid #59D5E0;
                                        
                color: white;
                
            }
            QPushButton:pressed {
                background-color: #31363F;
                color: white;
                border: 2px solid #222831;
                
            }
            
        """)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_5.setText(_translate("MainWindow", ""))
        self.pushButton_6.setText(_translate("MainWindow", ""))
        self.label.setText(_translate("MainWindow", "RX OPIMIZER"))
        self.pushButton.setText(_translate("MainWindow", "BS-4.240"))
        self.pushButton_2.setText(_translate("MainWindow", "CLEAN"))
        self.pushButton_2.clicked.connect(self.delete_files)
        self.pushButton_3.setText(_translate("MainWindow", "MSI-4.240 "))
        self.pushButton_11.setText(_translate("MainWindow", "BACKUP"))
        self.pushButton_11.clicked.connect(self.backup_registry)
        self.pushButton_12.setText(_translate("MainWindow", "BACKUP"))
        self.pushButton_12.clicked.connect(self.backup_registry2)
        self.pushButton_13.setText(_translate("MainWindow", "REVERT "))
        self.pushButton_13.clicked.connect(self.revert_registry)
        self.pushButton_14.setText(_translate("MainWindow", "REVERT "))
        self.pushButton_14.clicked.connect(self.revert_registry2)
        self.pushButton_4.setText(_translate("MainWindow", "UNLOCK"))
        self.pushButton_4.clicked.connect(self.unlock)



class RegistryUpdater(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.pushButton.clicked.connect(self.updateBlueStacksRegistry)
        self.pushButton_3.clicked.connect(self.updateMSIRegistry)
        self.pushButton_5.clicked.connect(self.close)
        self.pushButton_6.clicked.connect(self.showMinimized)

        # Enable dragging of the frameless window
        self.frame_2.mousePressEvent = self.mousePressEvent
        self.frame_2.mouseMoveEvent = self.mouseMoveEvent

    def updateBlueStacksRegistry(self):
        self.updateRegistry(
            r"HKEY_LOCAL_MACHINE\SOFTWARE\BlueStacks\Guests\Android",
            "4.240.30.1002"
        )

    def updateMSIRegistry(self):
        self.updateRegistry(
            r"HKEY_LOCAL_MACHINE\SOFTWARE\BlueStacks_msi2\Guests\Android",
            "4.240.15.6305"
        )

    def updateRegistry(self, path, old_version):
        new_version = "4.250.0.1070"

        try:
            # Read the current value from the registry
            command_read = f'reg query "{path}" /v BootParameters'
            result = subprocess.run(command_read, capture_output=True, text=True, shell=True)
            current_value = ''
            if result.returncode == 0:
                for line in result.stdout.splitlines():
                    if "BootParameters" in line:
                        current_value = line.split("    ")[-1].strip()
                        break

            if current_value:
                # Replace the version number
                new_value = current_value.replace(old_version, new_version)

                # Update the registry value
                command_update = f'reg add "{path}" /v BootParameters /t REG_SZ /d "{new_value}" /f'
                result_update = subprocess.run(command_update, capture_output=True, text=True, shell=True)

                if result_update.returncode == 0:
                    QMessageBox.information(self, 'Success', f'optimized')
                else:
                    QMessageBox.critical(self, 'Error', f'Failed')
            else:
                QMessageBox.critical(self, 'Error', 'Failed')

        except Exception as e:
            QMessageBox.critical(self, 'Error', f'An error occurred')

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.drag_position = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        if event.buttons() == QtCore.Qt.LeftButton:
            self.move(event.globalPos() - self.drag_position)
            event.accept()

    def is_admin(self):
        try:
            return os.getuid() == 0
        except AttributeError:
            return ctypes.windll.shell32.IsUserAnAdmin() != 0

    def backup_registry(self):
        self.pushButton.setVisible(True)
        if not self.is_admin():
            QMessageBox.critical(self, 'Error', 'This operation requires administrative privileges.')
            return
        
        backup_path = 'C:\\backup.reg'
        registry_path = 'HKEY_LOCAL_MACHINE\\SOFTWARE\\BlueStacks'
        command = f'reg export "{registry_path}" "{backup_path}" /y'
        
        try:
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            QMessageBox.information(self, 'Success', f'you are safe now ')
        except subprocess.CalledProcessError as e:
            QMessageBox.critical(self, 'Error', f'Failed')

    def revert_registry(self):
        if not self.is_admin():
            QMessageBox.critical(self, 'Error', 'This operation requires administrative privileges.')
            return
        
        backup_path = 'C:\\backup.reg'
        if os.path.exists(backup_path):
            command = f'reg import "{backup_path}"'
            try:
                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                QMessageBox.information(self, 'Success', 'uccessfully reverted')
            except subprocess.CalledProcessError as e:
                QMessageBox.critical(self, 'Error', f'Failed to revert')
        else:
            QMessageBox.warning(self, 'Warning', f'Backup file does not exist')

    def backup_registry2(self):
        self.pushButton_3.setVisible(True)
        if not self.is_admin():
            QMessageBox.critical(self, 'Error', 'This operation requires administrative privileges.')
            return
        
        backup_path = 'C:\\backup1.reg'
        registry_path = 'HKEY_LOCAL_MACHINE\\SOFTWARE\\BlueStacks_msi2'
        command = f'reg export "{registry_path}" "{backup_path}" /y'
        
        try:
            result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            QMessageBox.information(self, 'Success', f'you are safe now')
        except subprocess.CalledProcessError as e:
            QMessageBox.critical(self, 'Error', f'Failed')

    def revert_registry2(self):
        if not self.is_admin():
            QMessageBox.critical(self, 'Error', 'This operation requires administrative privileges.')
            return
        
        backup_path = 'C:\\backup1.reg'
        if os.path.exists(backup_path):
            command = f'reg import "{backup_path}"'
            try:
                result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
                QMessageBox.information(self, 'Success', 'successfully reverted')
            except subprocess.CalledProcessError as e:
                QMessageBox.critical(self, 'Error', f'Failed to revert')
        else:
            QMessageBox.warning(self, 'Warning', f'Backup file does not exist')

    def delete_files(self):
        files_to_delete = [r'C:\backup1.reg', r'C:\backup.reg']
        errors = []
        
        for file in files_to_delete:
                if os.path.exists(file):
                    os.remove(file)
                    print(f' cleared successfully.')
                else:
                    QMessageBox.information(self, 'error', 'no tmp found.')
    def unlock(self):
        self.pushButton_14.setVisible(True)
        self.pushButton_13.setVisible(True)
        self.pushButton_11.setVisible(True)
        self.pushButton_12.setVisible(True)
        self.pushButton_2.setVisible(True)
        self.pushButton_4.setText("RATE99")
        self.pushButton_4.setGeometry(QtCore.QRect(200, 200, 111, 71))

        QDesktopServices.openUrl(QUrl('https://rate99.blogspot.com/'))
        
if __name__ == "__main__":
    app = QApplication(sys.argv)

    # Splash screen
    splash_pix = QPixmap('settings.png')  # Replace with your splash image path
    splash = QSplashScreen(splash_pix, QtCore.Qt.WindowStaysOnTopHint)
    splash.setMask(splash_pix.mask())
    splash.show()
    
    QtCore.QTimer.singleShot(3000, splash.close)  # Display splash screen for 3 seconds

    MainWindow = RegistryUpdater()
    MainWindow.show()

    splash.finish(MainWindow)  # Ensure splash screen closes once main window is ready

    sys.exit(app.exec_())
